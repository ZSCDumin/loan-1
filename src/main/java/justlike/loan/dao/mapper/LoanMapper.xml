<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="justlike.loan.dao.LoanMapper" >
  <resultMap id="BaseResultMap" type="justlike.loan.model.Loan" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="price" property="price" jdbcType="BIGINT" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="created" property="created" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <association property="user" javaType="justlike.loan.model.User">
    	 <id column="user_id" property="id" jdbcType="BIGINT" />
   		 <result column="user_name" property="name" jdbcType="VARCHAR" />
   		 <result column="user_mobile" property="mobile" jdbcType="VARCHAR" />
    </association>
  </resultMap>
  <sql id="Base_Column_List" >
    loan.id, user_id, price, type, created, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from loan
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from loan
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="justlike.loan.model.Loan" >
    insert into loan (id, user_id, price, 
      type, created, status
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=INTEGER}, #{price,jdbcType=BIGINT}, 
      #{type,jdbcType=VARCHAR}, #{created,jdbcType=TIMESTAMP}, #{status,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="justlike.loan.model.Loan" >
    insert into loan
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="price != null" >
        price,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="price != null" >
        #{price,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="justlike.loan.model.Loan" >
    update loan
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=BIGINT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="justlike.loan.model.Loan" >
    update loan
    set user_id = #{userId,jdbcType=INTEGER},
      price = #{price,jdbcType=BIGINT},
      type = #{type,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="queryPageList" resultMap="BaseResultMap" parameterType="java.util.Map">
  	select
		<include refid="Base_Column_List" />
		,user.name as user_name,user.mobile as user_mobile
	from
		loan,user
	where
		1=1 
	limit
		#{PAGE_START},#{PAGE_LIMIT}
  </select>
  <select id="count" resultType="int">
  	select 
  		count(*)
  	from 
  		loan
  </select>
</mapper>